package texturemapper {
	import flash.display.DisplayObject;
	import flash.display.Loader;
	import flash.net.FileFilter;

	import flash.utils.ByteArray;

	import flash.filesystem.FileMode;
	import flash.filesystem.FileStream;
	import flash.filesystem.File;
	import flash.events.Event;
	import org.osflash.signals.Signal;
	
	/**
	 * @author cjgammon
	 */
	public class TModel {
		
		public var LOADED_CSS:Signal = new Signal(Array);
		public var LOADED_IMAGE:Signal = new Signal(DisplayObject);
		
		public var snapping:Boolean = false;
		
		private var css:String;
		private var imagePath:String;
		
		public function TModel()
		{

		}
		
		/*
		 * @param array : collection of TItems
		 */
		public function generateCSS(array:Array):String
		{
			var css:String = "/*GENERATED BY TEXTUREMAPPER*/ \n";
			css = css.concat("/*by cjgammon http://www.cjgammon.com*/ \n\n");
			
			for(var i:int=0;i<array.length;i++){
				var image:TImage = array[i];
				css = css.concat(".", image.name, "{", "\n");
				css = css.concat("\t", "width:", image.size.x, "px;", "\n");
				css = css.concat("\t", "height:", image.size.y, "px;", "\n");
				css = css.concat("\t", "background:", "url(", imagePath,") no-repeat;", "\n");
				css = css.concat("\t", "background-position:", -image.position.x, "px ", -image.position.y, "px;", "\n");
				css = css.concat("}", "\n\n");
			}
			return css;
		}
		
		//image loading
		public function loadImage():void 
		{
			var imageFile:File = new File();
            imageFile.addEventListener(Event.SELECT, handle_imageFile_SELECT);
            var fileFilter:FileFilter = new FileFilter("Images","*.jpg;*.jpeg;*.gif;*.png");
            imageFile.browseForOpen("Please select an image...", [fileFilter]);
		}

		private function handle_imageFile_SELECT(event : Event) : void 
		{
			var imageFile:File = File(event.currentTarget);
        	var stream:FileStream = new FileStream();
        	stream.open(imageFile, FileMode.READ);
        	var bytes:ByteArray = new ByteArray();
        	stream.readBytes(bytes);
           	var loader:Loader = new Loader();
            loader.loadBytes(bytes);
           	stream.close();
        	LOADED_IMAGE.dispatch(loader);
		}
				
		//css file loading
		public function loadCSS():void
		{
			var cssFile:File = new File();
            cssFile.addEventListener(Event.SELECT, handle_cssFile_SELECT);
            cssFile.browseForOpen("Please select a file...");
		}
		
		private function handle_cssFile_SELECT(e:Event):void
		{
			var cssFile:File = File(e.currentTarget);				
        	var stream:FileStream = new FileStream();
        	stream.open(cssFile, FileMode.READ);
        	var content:String = stream.readUTFBytes(stream.bytesAvailable);
        	stream.close();
        	cssToObjects(content);
		}
		
		//css file saving
		public function saveCSS(array:Array, imagePath:String = ""):void
		{
			this.imagePath = imagePath;
			css = generateCSS(array);
			
			var saveFile:File = new File();
            saveFile.addEventListener(Event.SELECT, handle_saveFile_SELECT);
            saveFile.browseForSave("Save File As:");
		}
		
		private function handle_saveFile_SELECT(event:Event):void
		{
			var cssFile:File = File(event.currentTarget);				
			var stream:FileStream = new FileStream();
			stream.open( cssFile, FileMode.WRITE );
			stream.writeUTFBytes(css);
			stream.close();	
			cssFile = null;
			stream = null;
		}
		
		//convets css to object		
		private function cssToObjects(css:String):void
		{
			var classes:Array = css.match(/\.[0-9A-Za-z]+([0-9A-Za-z]){/g);
			var widths:Array = css.match(/width:[0-9]+(?:\.[0-9]*)?px/g);
			var heights:Array = css.match(/height:[0-9]+(?:\.[0-9]*)?px/g);
			var backgroundStrings:Array = css.match(/background-position:-?[0-9]+(?:\.[0-9]*)?px -.[0-9]+(?:\.[0-9]*)?px/g);
			
			trace(classes.length);
			var objectArray:Array = [];
			for(var i:int=0;i<classes.length;i++){
				var imageObject:Object = {};
				imageObject.name = classes[i].match(/[0-9A-Za-z]+([0-9A-Za-z])/);
				imageObject.width = Number(widths[i].match(/[0-9]+(?:\.[0-9]*)?/));
				imageObject.height = Number(heights[i].match(/[0-9]+(?:\.[0-9]*)?/));
				
				var backgroundPosition:Array = backgroundStrings[i].match(/-?[0-9]+(?:\.[0-9]*)?/g);
				imageObject.x = Number(backgroundPosition[0]);
				imageObject.y = Number(backgroundPosition[1]);
				imageObject.x = -imageObject.x;
				imageObject.y = -imageObject.y;
				
				trace(imageObject.x);
				objectArray.push(imageObject);
			}
			
			LOADED_CSS.dispatch(objectArray);
		}
	}
}
